<%#libs -lm #%>
<%#cflags -std=c99 -D_XOPEN_SOURCE=600 -D_ISOC99_SOURCE #%>
<%# /* -*- c -*- */
#ifndef TEST_FUNC_FILE
#error TEST_FUNC_FILE undefined
#endif

#define _S(x) #x
#define S(x) _S(x)

#define FLAG_FLOAT_TYPE 0x10
#define FLAG_INT_TYPE   0x20

#define ID_FLOAT        (FLAG_FLOAT_TYPE | 1)
#define ID_DOUBLE       (FLAG_FLOAT_TYPE | 2)
#define ID_LONG_DOUBLE  (FLAG_FLOAT_TYPE | 3)
#define ID_INT          (FLAG_INT_TYPE | 1)
#define ID_LONG         (FLAG_INT_TYPE | 2)
#define ID_LONG_LONG    (FLAG_INT_TYPE | 3)

#define _I(x) ID_##x
#define I(x) _I(x)

#define NAME_FLOAT       float
#define NAME_DOUBLE      double
#define NAME_LONG_DOUBLE long double
#define NAME_INT       int
#define NAME_LONG      long
#define NAME_LONG_LONG long long

#define _N(x) NAME_##x
#define N(x) _N(x)

#define NS(x) S(N(x))

#define FORMAT_FLOAT       "%aF"
#define FORMAT_DOUBLE      "%a"
#define FORMAT_LONG_DOUBLE "%LaL"
#define FORMAT_INT       "%d"
#define FORMAT_LONG      "%ldL"
#define FORMAT_LONG_LONG "%lldLL"

#define ALT_FORMAT_FLOAT       "%.8eF"
#define ALT_FORMAT_DOUBLE      "%.16e"
#define ALT_FORMAT_LONG_DOUBLE "%.20LeL"
#define ALT_FORMAT_INT       "%d"
#define ALT_FORMAT_LONG      "%ldL"
#define ALT_FORMAT_LONG_LONG "%lldLL"

#define _F(x) FORMAT_##x
#define F(x) _F(x)

#define _AF(x) ALT_FORMAT_##x
#define AF(x) _AF(x)

#include <math.h>
#include <float.h>
#include S(TEST_FUNC_FILE)

#ifndef ARG2_TYPE
#define NARGS 1
#else
#ifndef ARG3_TYPE
#define NARGS 2
#else
#define NARGS 3
#endif
#endif

#ifndef RET2_TYPE
#define NRET 1
#else
#define NRET 2
#endif

#define PRINT_FLOAT(x) \
  static void print_##x (N(x) f) { \
    if (isinf(f)) { if (f < (N(x))0.0) printf("-"); printf("INF"); } \
    else if (isnan(f)) printf("NAN"); \
    else printf(F(x), f); \
  }

#define PRINT_INT(x) \
  static void print_##x (N(x) n) { \
    printf(F(x), n); \
  }

PRINT_FLOAT(FLOAT)
PRINT_FLOAT(DOUBLE)
/* PRINT_FLOAT(LONG_DOUBLE) */

PRINT_INT(INT)
PRINT_INT(LONG)
PRINT_INT(LONG_LONG)

#define _PRINT(t, x) print_##t(x)
#define PRINT(t, x) _PRINT(t, x)
#%>
/*
   This file is automatically generated.
 */

/**
 * @file math/<%=s S(TEST_FUNC) %>.test.c
 */
#include <math.h>
#include <float.h>
#include <stdio.h>
#include <stdint.h>
#include "common.h"

#ifndef NAN
#define NAN (0.0f/0.0f)
#endif

#ifndef INF
#define INF (1.0f/0.0f)
#endif

#define ABS_FLOAT       fabsf
#define ABS_DOUBLE      fabs
#define ABS_LONG_DOUBLE fabsl

#define TOLERANCE_FLOAT       0x1p-20
#define TOLERANCE_DOUBLE      0x1p-50
#define TOLERANCE_LONG_DOUBLE 0x1p-60

#define RET_MINIMUM_FLOAT       0x1p-126
#define RET_MINIMUM_DOUBLE      0x1p-1022
#define RET_MINIMUM_LONG_DOUBLE 0x1p-16382

#define max(a, b) ((a > b) ? a : b)

#define CMP_FLOAT(x, t) \
  static int compare_##x(t actual, t expected) { \
    if (isnan(actual) && isnan(expected)) \
      return 1; \
    else if (isinf(actual) && isinf(expected)) \
      return ((actual > (t)0.0) == (expected > (t)0.0)); \
    else \
      return (ABS_##x(actual - expected) < max(ABS_##x(expected * TOLERANCE_##x), RET_MINIMUM_##x)); \
  }

#define CMP_INT(x, t) \
  static int compare_##x(t actual, t expected) { return (actual == expected); }

CMP_FLOAT(FLOAT, <%=s NS(FLOAT) %>)
CMP_FLOAT(DOUBLE, <%=s NS(DOUBLE) %>)
/* CMP_FLOAT(LONG_DOUBLE, <%=s NS(LONG_DOUBLE) %>) */

CMP_INT(INT, <%=s NS(INT) %>)
CMP_INT(LONG, <%=s NS(LONG) %>)
CMP_INT(LONG_LONG, <%=s NS(LONG_LONG) %>)

#define _CMP(t, a, e) compare_##t(a, e)
#define CMP(t, a, e) _CMP(t, a, e)

/**
 * @testname <%=s S(TEST_FUNC) %>_2
 * @testfor <%=s S(TEST_FUNC) %>
 */
TEST_CASE(<%=s S(TEST_FUNC) %>_2)
{
<%
  struct {
    N(ARG_TYPE) a;
#if NARGS >= 2
    N(ARG2_TYPE) a2;
#if NARGS >= 3
    N(ARG3_TYPE) a3;
#endif
#endif
  } args[] = ARGS;
 %>
  static struct {
    <%=s NS(ARG_TYPE) %> a;
<%
#if NARGS >= 2
 %>
    <%=s NS(ARG2_TYPE) %> a2;
<%
#if NARGS >= 3
 %>
    <%=s NS(ARG3_TYPE) %> a3;
<%
#endif
#endif
 %>
  } args[] = {
<%
    int i;
    for (i = 0; i < sizeof(args) / sizeof(args[0]); ++i) {
      printf("    { ");
      PRINT(ARG_TYPE, args[i].a);
#if NARGS >= 2
      printf(", ");
      PRINT(ARG2_TYPE, args[i].a2);
#if NARGS >= 3
      printf(", ");
      PRINT(ARG3_TYPE, args[i].a3);
#endif
#endif
      printf(" },\n");
    }
%>
  };
  static struct {
    <%=s NS(RET_TYPE) %> e;
<%
#if NRET >= 2
 %>
    <%=s NS(RET2_TYPE) %> e2;
<%
#endif
 %>
  } expected[] = {
<%
    for (i = 0; i < sizeof(args) / sizeof(args[0]); ++i) {
      N(RET_TYPE) r;
#if NRET >= 2
      N(RET2_TYPE) r2;
#endif
      printf("    { ");

#if NRET == 1
#if NARGS == 1
      r = TEST_FUNC(args[i].a);
#elif NARGS == 2
      r = TEST_FUNC(args[i].a, args[i].a2);
#elif NARGS == 3
      r = TEST_FUNC(args[i].a, args[i].a2, args[i].a3);
#endif
      PRINT(RET_TYPE, r);
#elif NRET == 2
#ifndef RET2_VAR
#if NARGS == 1
      r = TEST_FUNC(args[i].a, &r2);
#elif NARGS == 2
      r = TEST_FUNC(args[i].a, args[i].a2, &r2);
#elif NARGS == 3
      r = TEST_FUNC(args[i].a, args[i].a2, args[i].a3, &r2);
#endif
#else
#if NARGS == 1
      r = TEST_FUNC(args[i].a);
      r2 = RET2_VAR;
#elif NARGS == 2
      r = TEST_FUNC(args[i].a, args[i].a2);
      r2 = RET2_VAR;
#elif NARGS == 3
      r = TEST_FUNC(args[i].a, args[i].a2, args[i].a3);
      r2 = RET2_VAR;
#endif
#endif
      PRINT(RET_TYPE, r);
      printf(", ");
      PRINT(RET2_TYPE, r2);
#endif
      printf(" } ,\n");
    }
%>
  };
  int i;
  int ok = 1;
  for (i = 0; i < sizeof(args) / sizeof(args[0]); ++i) {
<%
#if NRET >= 2
 %>
    <%=s NS(RET2_TYPE) %> result2;
<%
#endif
 %>
    <%=s NS(RET_TYPE) %> result = <%=s S(TEST_FUNC) %>(args[i].a
<%
#if NARGS >= 2
 %>
                                , args[i].a2
<%
#if NARGS >= 3
 %>
                                , args[i].a3
<%
#endif
#endif
 %>
<%
#if NRET >= 2 && !defined(RET2_VAR)
 %>
                                , &result2
<%
#endif
 %>
                                );
<%
#if NRET >= 2 && defined(RET2_VAR)
 %>
    result2 = <%=s S(RET2_VAR) %>;
<%
#endif
 %>
    if (!CMP(<%=s S(RET_TYPE) %>, result, expected[i].e)
<%
#if NRET >= 2
 %>
        || !CMP(<%=s S(RET2_TYPE) %>, result2, expected[i].e2)
<%
#endif
 %>
        ) {
      fprintf(stderr,
              "<%=s S(TEST_FUNC) %>(<%=s AF(ARG_TYPE) %>"
<%
#if NARGS >= 2
 %>
              ", <%=s AF(ARG2_TYPE) %>"
<%
#if NARGS >= 3
 %>
              ", <%=s AF(ARG3_TYPE) %>"
<%
#endif
#endif
 %>
<%
#if NRET >= 2
 %>
              ", &r2"
<%
#endif
 %>
              ")\n",
              args[i].a
<%
#if NARGS >= 2
 %>
              , args[i].a2
<%
#if NARGS >= 3
 %>
              , args[i].a3
<%
#endif
#endif
 %>
              );
<%
#if NRET == 1
 %>
      fprintf(stderr,
              "returned: <%=s AF(RET_TYPE) %>, expected: <%=s AF(RET_TYPE) %>\n",
              result,
              expected[i].e
              );
<%
 #elif NRET == 2
 %>
      fprintf(stderr,
              "returned: (<%=s AF(RET_TYPE) %>, <%=s AF(RET2_TYPE) %>), "
              "expected: (<%=s AF(RET_TYPE) %>, <%=s AF(RET2_TYPE) %>)\n",
              result, result2,
              expected[i].e, expected[i].e2
              );
<%
#endif
 %>
      ok = 0;
    }
  }
  TEST(ok);
}
