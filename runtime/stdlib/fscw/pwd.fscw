/* -*- C -*- */

%% C-PROLOGUE
#include <pwd.h>

%% FSC-PROLOGUE
#include <pwd.h>

%% REQUIRED-DECLS
struct stdlib_passwd;
typedef gid_t;
require_function getpwnam;
require_function getpwent;
require_function getpwuid;
require_function endpwent;
require_function setpwent;
%% NATIVE-IMPLEMENTATION

static void wrap_passwd(fscw_struct_stdlib_passwd *dst, struct passwd *src)
{
  fscw_string_wrap_write(fscw_string_member(dst, pw_name), src->pw_name);
  fscw_string_wrap_write(fscw_string_member(dst, pw_passwd), src->pw_passwd);
  fscw_uid_t_wrap_write(fscw_uid_t_member(dst, pw_uid), src->pw_uid);
  fscw_gid_t_wrap_write(fscw_gid_t_member(dst, pw_gid), src->pw_gid);
  fscw_string_wrap_write(fscw_string_member(dst, pw_gecos), src->pw_gecos);
  fscw_string_wrap_write(fscw_string_member(dst, pw_dir), src->pw_dir);
  fscw_string_wrap_write(fscw_string_member(dst, pw_shell), src->pw_shell);
}

/**
 * @fn struct passwd *getpwnam(const char *name)
 *
 * @crashcase illegal pointer, buffer overflow, non-terminated string
 * @fsctype string(ro), struct(pointer)
 *
 * @author Lepidum Co., Ltd.
 */
fscw_pointer fscw_getpwnam(fscw_pointer_param(name))
{
  fscw_string_buf buf = fscw_string_unwrap_param(name, "getpwnam");
  struct passwd *p = getpwnam(buf.v);
  fscw_string_release(buf);

  if (p == NULL) {
    return fscw_pointer_wrap(NULL);
  } else {
    fscw_struct_stdlib_passwd *ret = fscw_struct_stdlib_passwd_alloc(1);
    wrap_passwd(ret, p);
    return fscw_pointer_wrap(ret);
  }
}

/**
 * @fn struct passwd *getpwuid(uid_t uid)
 *
 * @crashcase illegal pointer, buffer overflow
 * @fsctype string(ro), struct(pointer)
 *
 * @author Lepidum Co., Ltd.
 */
fscw_pointer fscw_getpwuid(fscw_uid_t_param(uid))
{
  struct passwd *p = getpwuid(uid);

  if (p == NULL) {
    return fscw_pointer_wrap(NULL);
  } else {
    fscw_struct_stdlib_passwd *ret = fscw_struct_stdlib_passwd_alloc(1);
    wrap_passwd(ret, p);
    return fscw_pointer_wrap(ret);
  }
}

/**
 * @fn void endpwent(void)
 * @brief close password database
 *
 * @crashcase none
 *
 * @author Lepidum Co., Ltd.
 */
void fscw_endpwent(void)
{
  endpwent();
}

/**
 * @fn struct passwd *getpwent(void)
 * @brief get next password entry.
 *
 * @crashcase none
 *
 * @author Lepidum Co., Ltd.
 */
fscw_pointer fscw_getpwent()
{
  struct passwd *p = getpwent();
  if (p) {
    fscw_struct_stdlib_passwd *ret = fscw_struct_stdlib_passwd_alloc(1);
    wrap_passwd(ret, p);
    return fscw_pointer_wrap(ret);
  } else {
    return fscw_pointer_wrap(NULL);
  }
}

/**
 * @fn void setpwent(void)
 * @brief rewind password database
 *
 * @crashcase none
 *
 * @author Lepidum Co., Ltd.
 */
void fscw_setpwent()
{
  setpwent();
}
