(* 
   Part of Fail-Safe C Compiler. Produced by Yutaka Oiwa.
   (c) 2001-2005 Yutaka Oiwa.
   (c) 2005-2008 AIST.

   This file is written by Yutaka Oiwa in 2008. *)

(** Typed abstract syntax tree for C. *)

(** See K&R book for details of each element. *)

type identifier = string
type extension_list = (string * C_abstree.extension_tree) list

type global_storage_class = 
    Extern of extension_list (** external declaration: must be provided by other modules; should not be initialized *)
  | Global of extension_list (** global declaration: must not be provided by other modules if initialized *)
  | ModuleStatic (** static declaration: not shared with other modules *)

and local_storage_class = Auto | Register | LocalStatic | FuncArgs
type union_flag = C_abstree.union_flag = Struct | Union
type builtin_type =
    Tchar
  | Tschar
  | Tuchar
  | Tshort
  | Tushort
  | Tint
  | Tuint
  | Tlong
  | Tulong
  | Tlonglong
  | Tulonglong
  | Tfloat
  | Tdouble
  | Tlongdouble

type program = global_declaration list
and global_declaration = global_declaration_desc Locterm.t

and ctt_initializer_desc = 
    CTTinitExp of expr
  | CTTinitList of ctt_initializer list

and ctt_initializer = 
    ctt_initializer_desc Locterm.t

and global_declaration_desc =
    CTTdeclFunction of global_storage_class * c_type * identifier *
      identifier list * statement
  | CTTdeclVariable of global_storage_class * c_type * identifier *
      ctt_initializer option
and variable_declaration =
    local_storage_class * c_type * identifier * ctt_initializer option
and c_type_desc =
    Tvoid
  | Tbuiltin of builtin_type
  | Tpointer of c_type
  | Tfunction of c_type list * bool * c_type
  | Tarray of c_type * Big_int.big_int option
  | Tstruct of struct_id
  | Tabstract of string (** used only for output extension. Not generated by parser. *)
and c_type = {
  ct_const_p : bool;
  ct_volatile_p : bool;
  ct_size : Big_int.big_int option;
  ct_align : Big_int.big_int option; (** alignment requirements *)
  ct_ty : c_type_desc;
}
and struct_id = int (** Identifiers for declared structs. *)
and statement_desc =
    CTTstmtNull
  | CTTstmtExpr of expr
  | CTTstmtLabeled of identifier * statement
  | CTTstmtCase_Labeled of Big_int.big_int * statement
  | CTTstmtDefault_Labeled of statement
  | CTTstmtCompound of variable_declaration list * statement list
  | CTTstmtIf of expr * statement * statement option
  | CTTstmtSwitch of expr * statement
  | CTTstmtWhile of expr * statement
  | CTTstmtDoWhile of statement * expr
  | CTTstmtFor of expr option * expr option * expr option * statement
  | CTTstmtGoto of identifier
  | CTTstmtContinue
  | CTTstmtBreak
  | CTTstmtReturn of expr option
and statement = statement_desc Locterm.t
and texpr = { expr_type : c_type; expr_t : expr_desc; }
and expr = texpr Locterm.t
and binop =
    CTTbinTimes
  | CTTbinDiv
  | CTTbinPlusVV  (** integer + integer, ++integer (translated as [(integer += 1)]) *)
  | CTTbinMinusVV (** integer - integer, --integer *)
  | CTTbinPostPlusVV (** integer++, used only with CTTexpBinAssign *)
  | CTTbinPostMinusVV (** integer--, ditto *)
  | CTTbinPlusPV (** pointer + integer, ++pointer *)
  | CTTbinMinusPP (** pointer - pointer --pointer *)
  | CTTbinMinusPV (** pointer - integer *)
  | CTTbinPostPlusPV (** pointer++, used only with CTTexpBinAssign *)
  | CTTbinPostMinusPV (** pointer--, ditto *)
  | CTTbinModulo
  | CTTbinLshift
  | CTTbinRshift
  | CTTbinLogAnd (** && *)
  | CTTbinLogOr (** || *)
  | CTTbinIntAnd (** & *)
  | CTTbinIntOr (** | *)
  | CTTbinIntXor
  | CTTbinLessThan
  | CTTbinLessEqual
  | CTTbinGtrThan
  | CTTbinGtrEqual
  | CTTbinEqual
  | CTTbinNotEqual
and unaryop = C_abstree.unaryop = UnaryPlus | UnaryMinus | LogNot | IntNot
and expr_desc =
    CTTexpComma of expr * expr
  | CTTexpAssign of expr * expr
  | CTTexpBinAssign of binop * expr * c_type option (** optional type of the result just before assignment, used only when the RHS argument is larger than LHS argument. *) * expr
  | CTTexpConditional of expr * expr * expr
  | CTTexpBinExpr of binop * expr * expr
  | CTTexpCoerce of c_type * expr
  | CTTexpUnaryExpr of unaryop * expr
  | CTTexpAddress of expr
  | CTTexpPtrDeref of expr (** [->] *)
  | CTTexpInvoke of expr * expr list
  | CTTexpField of expr * identifier
  | CTTexpConstant of c_constants
  | CTTexpVar of identifier * c_type (** variable reference *)
and c_constants =
    CTTconstNull
  | CTTconstInteger of Big_int.big_int
  | CTTconstFloat of float
  | CTTconstString of string
  | CTTconstTypeInfo of c_type (** Fail-Safe C extension *)
  | CTTconstAbstract of string (** used for output only *)
type struct_field_normal = {
  sf_id : identifier;
  sf_type : c_type;
  sf_size : Big_int.big_int;
}
type struct_field_bitfields = {
  s_bf_size : Big_int.big_int;
  s_bf_fields : (identifier option * c_type * int * (int * int)) list;
}
type struct_field =
    NormalField of struct_field_normal
  | BitField of struct_field_bitfields
type struct_ofsinfo =
    StrOfsNormal of Big_int.big_int
  | StrOfsBitfield of Big_int.big_int * int * (int * int)
type struct_desc = {
  str_union_p : union_flag;
  str_size : Big_int.big_int option;
  str_align : Big_int.big_int option;
  str_fields : (Big_int.big_int * struct_field) list;
  str_fields_byname : (identifier * (c_type * struct_ofsinfo)) list;
  str_assignable : bool;
  str_extension : (identifier * C_abstree.extension_tree) list;
  str_loc : Locterm.location;
}
type global_binding = {
  gbind_storage_class : global_storage_class;
  gbind_is_initialized : bool;
  gbind_type : c_type;
}
type environment = {
    module_hash : string;
    struct_table : struct_desc Util.earray;
    struct_name_table : (identifier * struct_id) list;
    global_declarations : (identifier * global_binding) list
}
val size_of_builtin_type : builtin_type -> int
val align_of_builtin_type : builtin_type -> int
val size_align_of_type_desc :
  ?s_table:struct_desc Util.Earray.t ->
  c_type_desc -> Big_int.big_int option * Big_int.big_int option
val make_c_type :
  ?const:bool ->
  ?volatile:bool ->
  ?s_table:struct_desc Util.Earray.t -> c_type_desc -> c_type
val update_c_type : ?s_table:struct_desc Util.Earray.t -> c_type -> c_type
(** Reconstruct c_type and update ct_size and ct_align *)
val type_char : c_type
val type_signed_char : c_type
val type_unsigned_char : c_type
val type_short : c_type
val type_unsigned_short : c_type
val type_int : c_type
val type_unsigned_int : c_type
val type_long : c_type
val type_unsigned_long : c_type
val type_long_long : c_type
val type_unsigned_long_long : c_type
val type_float : c_type
val type_double : c_type
val type_long_double : c_type
val type_void : c_type
val type_typeinfo_ptr : c_type
val type_boolean : c_type
val builtintype_ptrdiff_t : builtin_type
val type_ptrdiff_t : c_type
val type_size_t : c_type
val type_char_array : int -> c_type
val make_texpr_desc : expr_desc -> c_type -> texpr
val make_expr :
  expr_desc -> c_type -> loc:Locterm.location -> texpr Locterm.t
val is_signed_builtin_type : builtin_type -> bool
val get_max_value_of_type : c_type -> Big_int.big_int
val get_struct_desc : genv:environment -> int -> struct_desc
val reset_struct_size : genv:environment -> c_type -> c_type
(** Reconstruct c_type and update ct_size and ct_align for structs *)
val size_of_type : genv:environment -> c_type -> Big_int.big_int option
val align_of_type : genv:environment -> c_type -> Big_int.big_int option
val reconstruct_gdecl_table : genv:environment -> program -> environment
